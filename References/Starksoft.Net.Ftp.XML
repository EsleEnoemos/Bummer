<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starksoft.Net.Ftp</name>
    </assembly>
    <members>
        <member name="T:Starksoft.Net.Ftp.FtpAuthenticationException">
            <summary>
            This exception is thrown when an error occurs during the FTP authentication process.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpException">
            <summary>
            This exception is thrown when a general FTP exception occurs.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpException.LastResponse">
            <summary>
            Gets the last FTP response if one is available.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException">
            <summary>
            This exception is thrown when the server fails to respond to an FTP data connection in a timely manner.
            The waiting time can be adjusted by specifing a different value for the TransferTimeout property.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataConnectionException">
            <summary>
            This exception is thrown when the FTP client is unable to establish a data connection with the FTP server.
            Data connection are temporary, secondary connnections used to transfer files and other types of data between the
            FTP client and the FTP server.  The method in which data connections are established is determined by the type
            of data transfer mode specified when connection to an FTP server (e.g. Passive, Active)
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionClosedException">
            <summary>
            This exception is thrown when an error occurs during the FTP connection is closed while attempting to transmit data.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponse">
            <summary>
            FTP response class containing the FTP raw text, response code, and other information.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor">
            <summary>
            Default constructor for FtpResponse.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor(System.String)">
            <summary>
            Constructor for FtpResponse.
            </summary>
            <param name="rawText">Raw text information sent from the FTP server.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor for FtpResponse.
            </summary>
            <param name="response">FtpResponse object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.RawText">
            <summary>
            Get raw server response text information.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.Text">
            <summary>
            Get the server response text.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.Code">
            <summary>
            Get a value indicating the FTP server response code.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferCompleteEventArgs">
            <summary>
            Event arguments to facilitate the transfer complete event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.TransferCompleteEventArgs.#ctor(System.Int64,System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The total number of bytes transferred.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.BytesTransferred">
            <summary>
            The total number of bytes transferred.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseQueue">
            <summary>
            Thread safe FtpResponse queue object.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseQueue.Enqueue(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Adds an Response object to the end of the FtpResponseQueue.
            </summary>
            <param name="item">An FtpResponse item.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseQueue.Dequeue">
            <summary>
            Removes and returns the FtpResponse object at the beginning of the FtpResponseQueue.
            </summary>
            <returns>FtpResponse object at the beginning of the FtpResponseQueue</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseQueue.Count">
            <summary>
            Gets the number of elements contained in the FtpResponseQueue.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferMode">
            <summary>
            The type of data transfer mode (e.g. Active or Passive).
            </summary>
            <remarks>
            The default setting is Passive data transfer mode.  This mode is widely used as a
            firewall friendly setting for the FTP clients operating behind a firewall.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferMode.Active">
            <summary>
            Active transfer mode.  In this mode the FTP server initiates a connection to the client when transfering data.
            </summary>
            <remarks>This transfer mode may not work when the FTP client is behind a firewall and is accessing a remote FTP server.</remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferMode.Passive">
            <summary>
            Passive transfer mode.  In this mode the FTP client initiates a connection to the server when transfering data.
            </summary>
            <remarks>
            This transfer mode is "firewall friendly" and generally allows an FTP client behind a firewall to access a remote FTP server.
            This mode is recommended for most data transfers.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferDirection">
            <summary>
            The data transfer directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferDirection.ToClient">
            <summary>
            Transfer data from server to client.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferDirection.ToServer">
            <summary>
            Transfer data from client to server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.HashingFunction">
            <summary>
            Enumeration representing the type of integrity algorithm used to verify the integrity of the file after transfer and storage.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingFunction.None">
            <summary>
            No algorithm slected.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingFunction.Crc32">
            <summary>
            Cyclic redundancy check (CRC).  A CRC can be used in the same way as a checksum to detect accidental 
            alteration of data during transmission or storage.
            </summary>
            <remarks>
            It is often falsely assumed that when a message and its CRC are transmitted over an open channel, then when it arrives 
            if the CRC matches the message's calculated CRC then the message can not have been altered in transit.
            For this reason it is recommended to use SHA1 whenever possible.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingFunction.Sha1"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingFunction.Md5">
            <summary>
            Message-Digest algorithm 5 (MD5).  Hashing function used to produce a 'unique' signature to detect 
            alternation of data during transmission or storage.
            </summary>
            <remarks>
            MD5 is a weak algorithm and has been show to produce collisions.  For this reason it is recommended to use SHA1 whenere possible.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingFunction.Sha1"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingFunction.Sha1">
            <summary>
            Secure Hash Algorithm (SHA).  cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard.
            </summary>
            <remarks>
            SHA1 is the recommended integrity check algorithm.  Even a small change in the message will, with overwhelming probability, result in a completely different hash due to the avalanche effect.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseCode">
            <summary>
            Enumeration representing all the various response codes from a FTP server.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.None">
            <summary>
            No response was received from the server.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandOkay">
            <summary>
            The command was executed sucessfully (200).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SyntaxErrorCommandUnrecognized">
            <summary>
            A syntax error occurred because the command was not recognized (500).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SyntaxErrorInParametersOrArguments">
            <summary>
            A syntax error occurred because the input parameters or arguments for the command are invalid (501).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplementedSuperfluousAtThisSite">
            <summary>
            The command is considered superfluous and not implemented by the FTP server (202).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplemented">
            <summary>
            The command is not implement by the FTP server (502).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.BadSequenceOfCommands">
            <summary>
            A bad sequence of commands was issued (503).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplementedForThatParameter">
            <summary>
            The command does not support the supplied parameter (504).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RestartMarkerReply">
            <summary>
            Restart marker reply (110).  MARK yyyy = mmmm  Where yyyy is User-process data 
            stream marker, and mmmm server's equivalent marker (note the spaces between
            markers and "=").
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SystemStatusOrHelpReply">
            <summary>
            System status or system help reply (211).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DirectoryStatus">
            <summary>
            Directory status (212).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.FileStatus">
            <summary>
            File status (213).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.HelpMessage">
            <summary>
            Help message (214).  On how to use the server or the meaning of a particular
            non-standard command.  This reply is useful only to the human user.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NameSystemType">
            <summary>
            Name system type where Name is an official system name from the list in the
            Assigned Numbers document (215).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceReadyInxxxMinutes">
            <summary>
            Service ready in xxx minutes (120).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceReadyForNewUser">
            <summary>
            Service is now ready for new user (220).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceClosingControlConnection">
            <summary>
            Service is closing control connection (221).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceNotAvailableClosingControlConnection">
            <summary>
            Service not available, closing control connection (421). This may be a reply to any 
            command if the service knows it must shut down.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DataConnectionAlreadyOpenSoTransferStarting">
            <summary>
            Data connection already open; transfer starting (125).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DataConnectionOpenSoNoTransferInProgress">
            <summary>
            Data connection open so no transfer in progress (225).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CannotOpenDataConnection">
            <summary>
            Can not open data connection (425).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ClosingDataConnection">
            <summary>
            Requested file action successful (for example, file transfer or file abort) (226).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ConnectionClosedSoTransferAborted">
            <summary>
            Connection closed therefore the transfer was aborted (426).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.EnteringPassiveMode">
            <summary>
            Entering Passive Mode (h1,h2,h3,h4,p1,p2) (227).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.UserLoggedIn">
            <summary>
            User logged in, proceed (230).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NotLoggedIn">
            <summary>
            User is not logged in.  Command not accepted (530).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.UserNameOkayButNeedPassword">
            <summary>
            The user name was accepted but the password must now be supplied (331).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NeedAccountForLogin">
            <summary>
            An account is needed for login (332).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NeedAccountForStoringFiles">
            <summary>
            An account is needed for storing file on the server (532).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.FileStatusOkaySoAboutToOpenDataConnection">
            <summary>
            File status okay; about to open data connection (150).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionOkayAndCompleted">
            <summary>
            Requested file action okay, completed (250).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.PathNameCreated">
            <summary>
            The pathname was created (257).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionPendingFurtherInformation">
            <summary>
            Requested file action pending further information (350).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionNotTaken">
            <summary>
            Requested file action not taken (450).  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenFileUnavailable">
            <summary>
            Requested file action not taken (550).  File unavailable (e.g., file busy).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionAbortedDueToLocalErrorInProcessing">
            <summary>
            Requested action aborted (451). Local error in processing.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionAbortedPageTypeUnknown">
            <summary>
            Requested action aborted (551). Page type unknown.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenInsufficientStorage">
            <summary>
            Requested action not taken (452).  Insufficient storage space in system.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionAbortedExceededStorageAllocation">
            <summary>
            Requested file action aborted (552).  Exceeded storage allocation (for current directory or dataset).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenFileNameNotAllowed">
            <summary>
            Requested action not taken (553).  File name not allowed.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.AuthenticationCommandOkay">
            <summary>
            Secure authentication Okay (234).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceIsUnavailable">
            <summary>
            SSL service is Unavailable (431).
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpSecurityProtocol">
            <summary>
            Defines the possible versions of FtpSecurityProtocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.None">
            <summary>
            No security protocol specified.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1Explicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0 is required to secure communciations.  The TLS protocol is defined in IETF RFC 2246 and supercedes the SSL 3.0 protocol.
            </summary>
            <remarks>
            The AUTH TLS command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1OrSsl3Explicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0. or Secure Socket Layer (SSL) version 3.0 is acceptable to secure communications in explicit mode.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection but the security protocol is negotiated between the server and client.  
            TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl3Explicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 3.0 is required to secure communications in explicit mode.  SSL 3.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl2Explicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 2.0 is required to secure communications in explicit mode.  SSL 2.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only.  SSL 2.0 has several weaknesses and should only be used with legacy FTP server that require it.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1Implicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0 is required to secure communciations in explicit mode.  The TLS protocol is defined in IETF RFC 2246 and supercedes the SSL 3.0 protocol.
            </summary>
            <remarks>
            The AUTH TLS command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1OrSsl3Implicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0. or Secure Socket Layer (SSL) version 3.0 is acceptable to secure communications in implicit mode.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection but the security protocol is negotiated between the server and client.  
            TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl3Implicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 3.0 is required to secure communications in implicit mode.  SSL 3.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl2Implicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 2.0 is required to secure communications in implicit mode.  SSL 2.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only.  SSL 2.0 has several weaknesses and should only be used with legacy FTP server that require it.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpBase">
            <summary>
            Base abstract class for FtpClient.  Implements FTP network protocols.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.#ctor(System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Initializes a new instance of the FtpNetworkAdapter class.
            </summary>
            <param name="port">Port number the adapter is to communicate on.</param>
            <param name="securityProtocol">Value indicating what secure security communications protocol should be used (if any).</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.#ctor(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Initializes a new instance of the FtpNetworkAdapter class.
            </summary>
            <param name="host">Host the adapter is to communicate on.</param>
            <param name="port">Port number the adapter is to communicate on.</param>
            <param name="securityProtocol">Value indicating what secure security communications protocol should be used (if any).</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.IO.Stream,System.Boolean)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,Starksoft.Net.Ftp.FileAction)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)">
            <summary>
            Gets the checksum value from the FTP server for the file specified.  Use this value to compare a local checksum to determine file integrity.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="path">Path to the file ont the remote FTP server.</param>
            <returns>Hash value in a string format.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String,System.Int64,System.Int64)">
            <summary>
            Gets the checksum hash value from the FTP server for the file specified.  Use this value to compare a local checksum to determine file integrity.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="path">Path to the file on the remote FTP server.</param>
            <param name="startPosition">Byte position of where the server should begin computing the hash.</param>
            <param name="endPosition">Byte position of where the server should end computing the hash.</param>
            <returns>Checksum hash value in a string format.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)">
            <summary>
            Computes a checksum for a local file.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="localPath">Path to file to perform checksum operation on.</param>
            <returns>Hash value in a string format.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.IO.Stream)">
            <summary>
            Computes a checksum for a Stream object.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="inputStream">Any System.IO.Stream object.</param>
            <returns>Hash value in a string format.</returns>
            <remarks>
            The Stream object must allow reads and must allow seeking.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.IO.Stream,System.Int64)">
            <summary>
            Computes a checksum value for a Stream object.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="inputStream">Any System.IO.Stream object.</param>
            <param name="startPosition">Byte position of where the hash computation should begin.</param>
            <returns>Hash value in a string format.</returns>
            <remarks>
            The Stream object must allow reads and must allow seeking.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.SendRequest(Starksoft.Net.Ftp.FtpRequest)">
            <summary>
            Send a FTP command request to the server.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CreateAsyncWorker">
            <summary>
            creates a new async worker object for the async events to use.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CloseAllConnections">
            <summary>
            Closes all connections to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.AbortMonitorThread">
            <summary>
            The monitor thread should close automatically once the command connection is terminated.  If it does not close properly, force it to close.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.WaitForHappyCodes(System.Int32,Starksoft.Net.Ftp.FtpResponseCode[])">
            <summary>
            Waits until a happy code has been returned by the FTP server or times out.
            </summary>
            <param name="timeout">Maximum time to wait before timing out.</param>
            <param name="happyResponseCodes">Server response codes to wait for.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CreateSslStream(System.IO.Stream)">
            <summary>
            Creates an SSL or TLS secured stream.
            </summary>
            <param name="stream">Unsecured stream.</param>
            <returns>Secured stream</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Dispose">
            <summary>
            Disposes all objects and connections.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Dispose(System.Boolean)">
            <summary>
            Dispose Method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Finalize">
            <summary>
            Dispose deconstructor.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ServerResponse">
            <summary>
            Server response event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ClientRequest">
            <summary>
            Server request event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.TransferProgress">
            <summary>
            Data transfer progress event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.TransferComplete">
            <summary>
            Data transfer complete event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate">
            <summary>
            Security certificate authentication event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed">
            <summary>
            Connection closed event.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsAsyncCanceled">
            <summary>
            Gets a value indicating whether an asynchronous operation is canceled.
            </summary>
            <remarks>Returns true if an asynchronous operation is canceled; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Port">
            <summary>
            Gets or sets the current port number used by the FtpClient to make a connection to the FTP server.
            </summary>
            <remarks>
            The default value is '80'.  This setting can only be changed when the 
            connection to the FTP server is closed.  And FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            
            Returns an integer representing the port number used to connect to a remote server.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Host">
            <summary>
            Gets or sets a text value containing the current host used by the FtpClient to make a connection to the FTP server.
            </summary>
            <remarks>
            This value may be in the form of either a host name or IP address.
            This setting can only be changed when the 
            connection to the FTP server is closed.  And FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            
            Returns a string with either the host name or host ip address.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.SecurityProtocol">
            <summary>
            Gets or sets a value indicating what security protocol such as Secure Sock Layer (SSL) should be used.
            </summary>
            <remarks>
            The default value is 'None'.  This setting can only be changed when the 
            connection to the FTP server is closed.  An FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            
            Returns an enumerator specifying the choosen security protocol of either TLS v1.0, SSL v3.0 or SSL v2.0.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.SecurityCertificates"/>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.SecurityCertificates">
            <summary>
            Get Client certificate collection used when connection with a secured SSL/TSL protocol.  Add your client certificates 
            if required to connect to the remote FTP server.
            </summary>
            <remarks>Returns a X509CertificateCollection list contains X.509 security certificates.</remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.SecurityProtocol"/>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsCompressionEnabled">
            <summary>
            Gets or sets a value indicating that the client will use compression when uploading and downloading
            data.
            </summary>
            <remarks>
            This value turns on or off the compression algorithm DEFLATE to facility FTP data compression which is compatible with
            FTP servers that implement compression via the zLib compression software library.  The default value is 'False'.  
            This setting can only be changed when the system is not busy conducting other operations.  
            
            Returns True if compression is enabled; otherwise False;
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.MaxUploadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum upload speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any upload data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.MaxDownloadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.MaxDownloadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum download speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any download data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.MaxUploadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.LastResponse">
            <summary>
            Gets only the last response from the FTP server.
            </summary>
            <remarks>Returns a FtpResponse object containing the last FTP server response; other the value null (or Nothing in VB) is returned.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.LastResponseList">
            <summary>
            Gets the list of all responses since the last command was issues to the server.
            </summary>
            <remarks>Returns a FtpResponseCollection list containing all the responses.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TcpBufferSize">
            <summary>
            Gets or sets the TCP buffer size used when communicating with the FTP server in bytes.
            </summary>
            <remarks>Returns an integer value representing the buffer size.  The default value is 8192.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout">
            <summary>
            Gets or sets the TCP timeout used when communciating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 30000 (30 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout">
            <summary>
            Gets or sets the data transfer timeout used when communicating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 15000 (15 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout">
            <summary>
            Gets or sets the FTP command timeout used when communciating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 15000 (15 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin">
            <summary>
            The beginning port number range used by the FtpClient when opening a local 'Active' port.  The default value is 4051.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be less than or equal to the ActivePortRangeMax value.</exception>
            <remarks>
            When the FtpClient is in 'Active' mode a local port is opened for communications from the FTP server.
            The FtpClient will attempt to open an unused TCP listener port between the ActivePortRangeMin and ActivePortRangeMax values.
            Default value is 50000.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax">
            <summary>
            The ending port number range used by the FtpClient when opening a local 'Active' port.  The default value is 4080.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be greater than or equal to the ActivePortRangeMin value.</exception>
            <remarks>
            When the FtpClient is in 'Active' mode a local port is opened for communications from the FTP server.
            The FtpClient will attempt to open an unused TCP listener port between the ActivePortRangeMin and ActivePortRangeMax values.
            Default value is 50080.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode">
            <summary>
            Gets or sets the data transfer mode to either Active or Passive.
            </summary>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Proxy">
             <summary>
             Gets or sets the the proxy object to use when establishing a connection to the remote FTP server.
             </summary>
             <remarks>Create a proxy object when traversing a firewall.</remarks>
             <code>
             FtpClient ftp = new FtpClient();
            
             // create an instance of the client proxy factory for the an ftp client
             ftp.Proxy = (new ProxyClientFactory()).CreateProxyClient(ProxyType.Http, "localhost", 6588);
                    
             </code>
             <seealso cref="T:Starksoft.Net.Proxy.ProxyClientFactory"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsConnected">
            <summary>
            Gets the connection status to the FTP server.
            </summary>
            <remarks>Returns True if the connection is open; otherwise False.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.AutoChecksumValidation">
            <summary>
            Sets the automatic file integrity setting (checksum) option on all data transfers (upload and download).
            </summary>
            <remarks>
            The FtpClient library will throw an FtpFileIntegrityException if the file integrity value do not match.
            
            Not all FTP servers support file integrity values such as SHA1, CRC32, or MD5.  If you server does support
            one of these file integrity options, you can set this property and the FtpClient will automatically check
            each file that is transferred to make sure the hash values match.  If the values do not match, an exception
            is thrown.
            </remarks>
            <seealso cref="T:Starksoft.Net.Ftp.FtpFileIntegrityException"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeChecksum(Starksoft.Net.Ftp.HashingFunction,System.String)"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.CharacterEncoding">
            <summary>
            Gets or sets the character encoding used when sending commands to the FTP server or receiving directory listing information.
            This encoding value does not affect the encoding of files being transferred.  The default value is UTF-8.  Some older FTP servers
            require different character encoding such as UTF-7.
            </summary>
            <remarks>
            To set this value use the .NET System.Text.Encoding class. The following example sets the character encoding to UTF-7.  In addition,
            other encodings can be specified by string name using the static method System.Text.Encoding.GetEncoding();
            <code>
                FtpClient.CharacterEncoding = System.Text.Encoding.UTF7;
            </code>
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.OpenAsyncCompletedEventArgs">
            <summary>
            Provides data for the OpenAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.OpenAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the OpenAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpSecureConnectionException">
            <summary>
            This exception is thrown when an error occurs with a secure command or data connection to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFileIntegrityException">
            <summary>
            This exception is thrown when a file integrity check fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFileIntegrityException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.ConnectionClosedEventArgs">
            <summary>
            Event arguments to facilitate the response event from the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.ConnectionClosedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpProxyException">
            <summary>
            This exception is thrown when an exception occurs while opening a connection to the FTP
            server using a proxy.  See the inner exception for more information when this exception is thrown.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpProxyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetFileAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetFileAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetFileAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the GetFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataCompressionException">
            <summary>
            This exception is thrown when the FTP server is unable to enable or disable data compression.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.IFtpItemParser">
             <summary>
             <para>
             This interface is used to create a pluggable, custom ftp item parser.  The FtpClient object has a property named
             ItemParser which is used to override the default item parser behavior.  You might need to create a custom parser for
             exotic FTP servers which the FtpClient object does not support.  There is no standard supported in the RFC 959 standard
             as to what format an FTP server must give for directory and file listings.  Although newer FTP protocol standards so
             support a structured directory listing with detailed information, this new format is not widely supported amoung FTP 
             server vendors and there is no hope for support for legacy FTP servers.  
             </para>
             <para>
             The FtpClient object can handle the most common formats without issue but for some older or more exotic FTP servers you may 
             such as an MVS legacy system may use a very different format than the common Unix and DOS style format. 
             In this situation, it makes the most sense to create your own ftp item parser to parse the unique directory and file listing.
             </para>
             </summary>
             <remarks>
             <para>
             When creating a custom ftp item parser for a specific FTP server you must create a new object and implment the ParseLine method.
             Each line of directory listing data that is transmitted from the FTP server will result in the PareLine method being called.  You must
             parse the line of data and return a FtpItem object so that the item is added to the FtpItemList collection within the FtpClient object.
             </para>
             <para>
             Below is an example of a custom FtpItem parser that handles both DOS and OS/2 style FTP server listings.  Note that not all the information
             such as file permissions can be obtained from the FTP server.  
             </para>
             </remarks>
             <example>
             <code>
            using System;
            using System.Text.RegularExpressions; 
            
            public class CustomFtpItemParser : IFtpItemParser  
            {
                public FtpItem ParseLine(string line)
                {
                    //  date portion
                    Regex rdate = new System.Text.RegularExpressions.Regex(@"(\d\d-\d\d-\d\d)");
                    string date = rdate.Match(line).ToString();
            
                    // time portion
                    Regex rtime = new System.Text.RegularExpressions.Regex(@"(\d\d:\d\d\s*(AM|PM))|(\d\d:\d\d)", RegexOptions.IgnoreCase);
                    string time = rtime.Match(line).ToString();
            
                    // file size portion
                    Regex rsize = new System.Text.RegularExpressions.Regex(@"((?&lt;=(\d\d:\d\d\s*(AM|PM)\s*))\d+)|(\d+(?=\s+\d\d-\d\d-\d\d\s+))", RegexOptions.IgnoreCase);
                    string size = rsize.Match(line).ToString();
            
                    // directory
                    Regex rdir = new System.Text.RegularExpressions.Regex(@"&lt;DIR&gt;|\sDIR\s", RegexOptions.IgnoreCase);
                    string dir = rdir.Match(line).ToString();
            
                    // name
                    Regex rname = new System.Text.RegularExpressions.Regex(@"((?&lt;=&lt;DIR&gt;\s+).+)|((?&lt;=\d\d:\d\d\s+).+)|((?&lt;=(\d\d:\d\d(AM|PM)\s+\d+\s+)).+)", RegexOptions.IgnoreCase);
                    string name = rname.Match(line).ToString();
            
                    // put togther the date/time
                    DateTime dateTime = DateTime.MinValue;
                    DateTime.TryParse(String.Format("{0} {1}", date, time), out dateTime);
            
                    // parse the file size
                    long sizeLng = 0;
                    Int64.TryParse(size, out sizeLng);           
            
                    // determine the file item itemType
                    FtpItemType itemTypeObj;
                    if (dir.Length &gt; 0)
                        itemTypeObj = FtpItemType.Directory;
                    else
                        itemTypeObj = FtpItemType.File;
            
                    return new FtpItem(name, dateTime, sizeLng, "", "", itemTypeObj, line);
                }
            }       
             </code>
            
             <code>
             // create a FtpClient object to some local windows ftp server in your organization
             FtpClient ftp = new FtpClient("192.168.1.1");
            
             // use the custom ftp item parser
             ftp.ItemParser = new CustomFtpItemParser();
            
             // open a connect to the rserver
             ftp.Open("ftp", "user@mail.com");
             FtpItemList list = ftp.GetDirList("/");
            
             // list all the items to the debug output window
             foreach (FtpItem item in list)
             {
                 System.Diagnostics.Debug.WriteLine(item.Name + " " + item.Modified.ToString() + " " + item.Size.ToString() + " " 
                     + item.SymbolicLink + " " + item.Type.ToString() + " " + item.Permissions + " ---- " + item.RawText);   
             }
             
             ftp.Close();
             </code>
             </example>
        </member>
        <member name="M:Starksoft.Net.Ftp.IFtpItemParser.ParseLine(System.String)">
            <summary>
            The ParseLine method is called by the FtpClient for each line of directory listing data transmitted by the FTP server to the FTP client.
            </summary>
            <param name="line">A single line of data for a specific directory for file listing.</param>
            <returns>A new FtpItem object.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseEventArgs">
            <summary>
            Event arguments to facilitate the response event from the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseEventArgs.#ctor(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="response">FtpResponse object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseEventArgs.Response">
            <summary>
            Response object containing response received from the server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCmd">
            <summary>
            FTP server commands.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Unknown">
            <summary>
            Unknown command issued.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.User">
            <summary>
            The USER command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pass">
            <summary>
            The PASS command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mkd">
            <summary>
            The MKD command.  Make new directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rmd">
            <summary>
            The RMD command.  Remove directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Retr">
            <summary>
            The RETR command.  Retrieve file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pwd">
            <summary>
            The PWD command.  Print working directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Syst">
            <summary>
            The SYST command.  System status.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Cdup">
            <summary>
            The CDUP command.  Change directory up.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Dele">
            <summary>
            The DELE command.  Delete file or directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Type">
            <summary>
            The TYPE command.  Transfer type.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Cwd">
            <summary>
            The CWD command.  Change working directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Port">
            <summary>
            The PORT command.  Data port.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pasv">
            <summary>
            The PASV command.  Passive port.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stor">
            <summary>
            The STOR command.  Store file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stou">
            <summary>
            The STOU command.  Store file unique.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Appe">
            <summary>
            The APPE command.  Append file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rnfr">
            <summary>
            The RNFR command.  Rename file from.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rnto">
            <summary>
            The RFTO command.  Rename file to.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Abor">
            <summary>
            The ABOR command.  Abort current operation.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.List">
            <summary>
            The LIST command.  List files.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Nlst">
            <summary>
            The NLST command.  Namelist files.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Site">
            <summary>
            The SITE command.  Site.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stat">
            <summary>
            The STAT command.  Status.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Noop">
            <summary> 
            The NOOP command.  No operation.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Help">
            <summary>
            The HELP command.  Help.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Allo">
            <summary>
            The ALLO command.  Allocate space.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Quit">
            <summary>
            The QUIT command.  Quite session.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rest">
            <summary>
            The REST command.  Restart transfer.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Auth">
            <summary>
            The AUTH command.  Initialize authentication.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pbsz">
            <summary>
            The PBSZ command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Prot">
            <summary>
            The PROT command.  Security protocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mode">
            <summary>
            The MODE command.  Data transfer mode.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mdtm">
            <summary>
            The MDTM command.  Month, date, and time.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Size">
            <summary>
            The SIZE command.  File size.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Feat">
            <summary>
            The FEAT command.  Supported features.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xcrc">
            <summary>
            The XCRC command.  CRC file integrity.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xmd5">
            <summary>
            The XMD5 command.  MD5 file integrity.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xsha1">
            <summary>
            The XSHA1 command.  SHA1 file integerity.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Epsv">
            <summary>
            The EPSV command.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Erpt">
            <summary>
            The ERPT command.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpRequest">
            <summary>
            FTP request object which contains the command, arguments and text or an FTP request.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor(System.Text.Encoding,Starksoft.Net.Ftp.FtpCmd,System.String[])">
            <summary>
            FTP request constructor.
            </summary>
            <param name="encoding">Text encoding object to use.</param>
            <param name="command">FTP request command.</param>
            <param name="arguments">Parameters for the request</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor(System.Text.Encoding,Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            FTP request constructor.
            </summary>
            <param name="encoding">Text encoding object to use.</param>
            <param name="command">FTP request command.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Command">
            <summary>
            Get the FTP command enumeration value.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Arguments">
            <summary>
            Get the FTP command arguments (if any).
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Text">
            <summary>
            Get the FTP command text with any arguments.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.IsFileTransfer">
            <summary>
            Gets a boolean value indicating if the command is a file transfer or not.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpAsynchronousOperationException">
            <summary>
            This exception is thrown when an asynchronous operation fails or is cancelled.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpRequestEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient request event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequestEventArgs.#ctor(Starksoft.Net.Ftp.FtpRequest)">
            <summary>
            Constructor for FtpRequestEventArgs.
            </summary>
            <param name="request">An FtpRequest object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequestEventArgs.Request">
            <summary>
            Client request command text sent from the client to the server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItemCollection">
            <summary>
            Ftp item list.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.#ctor">
            <summary>
            Default constructor for FtpItemCollection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.#ctor(System.String,System.String,Starksoft.Net.Ftp.IFtpItemParser)">
            <summary>
            Split a multi-line file list text response and add the parsed items to the collection.
            </summary>
            <param name="path">Path to the item on the FTP server.</param>
            <param name="fileList">The multi-line file list text from the FTP server.</param>
            <param name="itemParser">Line item parser object used to parse each line of fileList data.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.Merge(Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
            Merges two FtpItemCollection together into a single collection.
            </summary>
            <param name="items">Collection to merge with.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.ToDataTable">
            <summary>
            Convert current FtpCollection to a DataTable object.
            </summary>
            <returns>Data table object.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.IndexOf(Starksoft.Net.Ftp.FtpItem)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpItemCollection list.
            </summary>
            <param name="item">The FtpItem to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.Add(Starksoft.Net.Ftp.FtpItem)">
            <summary>
            Adds an FtpItem to the end of the FtpItemCollection list.
            </summary>
            <param name="item">FtpItem object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.ContainsName(System.String)">
            <summary>
            Searches for the specified object based on the 'name' parameter value
            and returns true if an object with the name is found; otherwise false.
            </summary>
            <param name="name">The name of the FtpItem to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.TotalSize">
            <summary>
            Gets the size, in bytes, of all files in the collection as reported by the FTP server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpItemCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.Item(System.Int32)">
            <summary>
            Gets an FtpItem from the FtpItemCollection based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpItem</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetDirListAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
             Initializes a new instance of the PutFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="directoryListing">A FtpItemCollection containing the directory listing.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs.DirectoryListingResult">
            <summary>
            Directory listing collection.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferType">
            <summary>
            Enumeration representing type of file transfer mode.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.None">
            <summary>
            No transfer type.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.Ascii">
            <summary>
            Transfer mode of type 'A' (ascii).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.Binary">
            <summary>
            Transfer mode of type 'I' (image or binary)
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FileAction">
            <summary>
            Enumeration representing the three types of actions that FTP supports when
            uploading or 'putting' a file on an FTP server from the FTP client.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.Create">
            <summary>
            Create a new file or overwrite an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.CreateNew">
            <summary>
            Create a new file.  Do not overwrite an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.CreateOrAppend">
            <summary>
            Create a new file or append an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.Resume">
            <summary>
            Resume a file transfer.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.ResumeOrCreate">
            <summary>
            Resume a file transfer if the file already exists.  Otherwise, create a new file.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpClient">
            <summary>
            The FtpClient Component for .NET is a fully .NET coded RFC 959 compatible FTP object component that supports the RFC 959, SOCKS and HTTP proxies, SSLv2, SSLv3, and TLSv1
            as well as automatic file integrity checks on all data transfers.  
            The component library also supports a pluggable directory listing parser.  The Starksoft FtpClient Component for .NET support most FTP servers.
            </summary>
            <remarks>
            <para>
            The object implements and uses the following FTP commands and provides a simple to use component.
            FTP RFC 959 commands (and extended) directly supported: 
                USER    RMD     CDUP    CWD     STOU    RETR    AUTH    SITE CHMOD
                PASS    RETR    DELE    PORT    APPE    MDTM    PROT        
                QUIT    PWD     TYPE    PASV    REST    SIZE    MODE  
                MKD     SYST    MODE    STOR    RNFR    FEAT    XSHA1
                NLST    HELP    RNTO    SITE    ALLO    QUIT    XMD5
                ABORT   STAT    LIST    NOOP    PBSZ    XCRC    
            </para>
            <para>
            Custom FTP server commands can be executed using the Quote() method.  This allows the FtpClient object to handle
            certain custom commands that are not supported by the RFC 959 standard but are required by specific FTP server
            implementations for various tasks.
            </para>
            <para>
            The Starksoft FtpClient Component for .NET supports SOCKS v4, SOCKS v4a, SOCKS v5, and HTTP proxy servers.  The proxy settings are not read
            from the local web browser proxy settings so deployment issues are not a problem with using proxy connections.  In addition the library also
            supports active and passive (firewall friendly) mode transfers.  The Starksoft FtpClient Component for .NET supports data compression, bandwidth throttling,
            and secure connections through SSL (Secure Socket Layer) and TLS.  The Starksoft FtpClient Component for .NET also supports automatic transfer integrity checks via 
            CRC, MD5, and SHA1.  The FtpClient object can parse many different directory listings from various FTP server implementations.  But for those servers that are difficult to 
            parse of produce strange directory listings you can write your own ftp item parser.  See the IFtpItemParser interface
            for more information and an example parser.  Finally, the Starksoft FtpClient Component for .NET  also provides support for encrypting and decrypting PGP data files though a .NET wrapper
            class that interfaces directly with the open source GNU Open PGP executable.   
            </para>
            <para>
            The FtpClient libary has been tested with the following FTP servers and file formats.
            <list type="">
                <item>IIS 6.0 under Microsoft Windows 2000 and Windows 2003 server, </item>
                <item>Microsoft FTP server running IIS 5.0</item>
                <item>Gene6FTP Server</item>
                <item>ProFTPd</item>
                <item>Wu-FTPd</item>
                <item>WS_FTP Server (by Ipswitch)</item>
                <item>Serv-U FTP Server</item>
                <item>GNU FTP server</item>
                <item>Many public FTP servers</item>
            </list>
            </para>
            </remarks>
            <example>
            <code>
            FtpClient ftp = new FtpClient("ftp.microsoft.com");
            // note: DataTransferMode is actually passive mode (PASV) by default
            ftp.DataTransferMode = DataTransferMode.Passive; 
            ftp.Open("anonymous", "myemail@host.com");
            ftp.ChangeDirectory("Softlib");
            ftp.GetFile("README.TXT", "c:\\README.TXT"); 
            ftp.Close();
            </code>
            </example>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor">
            <summary>
            FtpClient default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <remarks>
            This method takes one parameter to specify
            the host name (or ip address).
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <param name="port">Port number used to connect to the remote FTP server.</param>
            <remarks>
            This method takes two parameters that specify 
            the host name (or ip address) and the port to connect to the host.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <param name="port">Port number used to connect to the remote FTP server.</param>
            <param name="securityProtocol">Enumeration value indicating what security protocol (such as SSL) should be enabled for this connection.</param>
            <remarks>
            This method takes three parameters that specify 
            the host name (or ip address), port to connect to and what security protocol should be used when establishing the connection.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)">
            <summary>
            Opens a connection to the remote FTP server and log in with user name and password credentials.
            </summary>
            <param name="user">User name.  Many public ftp allow for this value to 'anonymous'.</param>
            <param name="password">Password.  Anonymous public ftp servers generally require a valid email address for a password.</param>
            <remarks>Use the Close() method to log off and close the connection to the FTP server.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Close"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Reopen">
            <summary>
            Reopens a lost ftp connection.
            </summary>
            <remarks>
            If the connection is currently open or the connection has never been open and FtpException is thrown.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeUser(System.String,System.String)">
            <summary>
            Change the currently logged in user to another user on the FTP server.
            </summary>
            <param name="user">The name of user.</param>
            <param name="password">The password for the user.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Close">
            <summary>
            Closes connection to the FTP server.
            </summary>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryMultiPath(System.String)">
            <summary>
            Changes the current working directory on older FTP servers that cannot handle a full path containing
            multiple subdirectories.  This method will separate the full path into separate change directory commands
            to support such systems.
            </summary>
            <param name="path">Path of the new directory to change to.</param>
            <remarks>Accepts both foward slash '/' and back slash '\' path names.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory on the server.  Some FTP server will not accept this command 
            if the path contains mutiple directories.  For those FTP server implementations see the method
            ChangeDirectoryMultiPath(string).
            </summary>
            <param name="path">Path of the new directory to change to.</param>
            <remarks>Accepts both foward slash '/' and back slash '\' path names.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryMultiPath(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory.
            </summary>
            <returns>A string value containing the current full working directory path on the FTP server.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryUp"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the remote FTP server.  
            </summary>
            <param name="path">The path name of the file to delete.</param>
            <remarks>
            The file is deleted in the current working directory if no path information 
            is specified.  Otherwise a full absolute path name can be specified.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to delete the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.DeleteDirectory(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Abort">
            <summary>
            Aborts an action such as transferring a file to or from the server.  
            </summary>
            <remarks>
            The abort command is sent up to the server signaling the server to abort the current activity.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.MakeDirectory(System.String)">
            <summary>
            Creates a new directory on the remote FTP server.  
            </summary>
            <param name="path">The name of a new directory or an absolute path name for a new directory.</param>
            <remarks>
            If a directory name is given for path then the server will create a new subdirectory 
            in the current working directory.  Optionally, a full absolute path may be given.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to make the subdirectory using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)">
            <summary>
            Moves a file on the remote FTP server from one directory to another.  
            </summary>
            <param name="fromPath">Path and/or file name to be moved.</param>
            <param name="toPath">Destination path specifying the directory where the file will be moved to.</param>
            <remarks>
            This method actually results in several FTP commands being issued to the server to perform the physical file move.  
            This method is available for your convenience when performing common tasks such as moving processed files out of a pickup directory
            and into a archive directory.
            Note that some older FTP server implementations will not accept a full path to a filename.  On those systems this method may not work
            properly.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory from the FTP server.
            </summary>
            <param name="path">Directory to delete.</param>
            <remarks>
            The path can be either a specific subdirectory relative to the 
            current working directory on the server or an absolute path to 
            the directory to remove.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory of the directory you wish to delete using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.DeleteFile(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetHelp">
            <summary>
            Executes the specific help dialog on the FTP server.  
            </summary>
            <returns>
            A string contains the help dialog from the FTP server.
            </returns>
            <remarks>
            Every FTP server supports a different set of commands and this commands 
            can be obtained by the FTP HELP command sent to the FTP server.  The information sent
            back is not parsed or processed in any way by the FtpClient object.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileDateTime(System.String,System.Boolean)">
            <summary>
            Retrieves the data and time for a specific file on the ftp server as a Coordinated Universal Time (UTC) value (formerly known as GMT). 
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="adjustToLocalTime">Specifies if modified date and time as reported on the FTP server should be adjusted to the local time zone with daylight savings on the client.</param>
            <returns>
            A date time value.
            </returns>
            <remarks>
            This function uses the MDTM command which is an additional feature command and therefore not supported
            by all FTP servers.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileSize(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime)">
            <summary>
            Set the date and time for a specific file or directory on the server.
            </summary>
            <param name="path">The path or name of the file or directory.</param>
            <param name="dateTime">New date to set on the file or directory.</param>
            <remarks>
            This function uses the MDTM command which is an additional feature command and therefore not supported
            by all FTP servers.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory which has the file you wish to set the date and time using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Rename(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetStatus">
            <summary>
            Retrieves the specific status for the FTP server.  
            </summary>
            <remarks>
            Each FTP server may return different status dialog information.  The status information sent
            back is not parsed or processed in any way by the FtpClient object. 
            </remarks>
            <returns>
            A string containing the status of the FTP server.
            </returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryUp">
            <summary>
            Changes the current working directory on the FTP server to the parent directory.  
            </summary>
            <remarks>
            If there is no parent directory then ChangeDirectoryUp() will not have 
            any affect on the current working directory.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileSize(System.String)">
            <summary>
            Get the file size for a file on the remote FTP server.  
            </summary>
            <param name="path">The name and/or path to the file.</param>
            <returns>An integer specifying the file size.</returns>
            <remarks>
            The path can be file name relative to the current working directory or an absolute path.  This command is an additional feature 
            that is not supported by all FTP servers.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file size using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileDateTime(System.String,System.Boolean)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFeatures">
            <summary>
            Get the additional features supported by the remote FTP server.  
            </summary>
            <returns>A string containing the additional features beyond the RFC 959 standard supported by the FTP server.</returns>
            <remarks>
            This command is an additional feature beyond the RFC 959 standard and therefore is not supported by all FTP servers.        
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetStatus(System.String)">
            <summary>
            Retrieves the specific status for a file on the FTP server.  
            </summary>
            <param name="path">
            The path to the file.
            </param>
            <returns>
            A string containing the status for the file.
            </returns>
            <remarks>
            Each FTP server may return different status dialog information.  The status information sent
            back is not parsed or processed in any way by the FtpClient object. 
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the status of the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.AllocateStorage(System.Int64)">
            <summary>
            Allocates storage for a file on the FTP server prior to data transfer from the FTP client.  
            </summary>
            <param name="size">
            The storage size to allocate on the FTP server.
            </param>
            <remarks>
            Some FTP servers may return the client to specify the storage size prior to data transfer from the FTP client to the FTP server.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetSystemType">
            <summary>
            Retrieves a string identifying the remote FTP system.  
            </summary>
            <returns>
            A string contains the server type.
            </returns>
            <remarks>
            The string contains the word "Type:", and the default transfer type 
            For example a UNIX FTP server will return 'UNIX Type: L8'.  A Windows 
            FTP server will return 'WINDOWS_NT'.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.  
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  
            A unique file name is created by the server.    
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.IO.Stream)">
            <summary>
            Uploads any stream object to the remote FTP server and stores the data under a unique file name assigned by the FTP server.  
            </summary>
            <param name="inputStream">Any stream object on the local client machine.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  
            A unique file name is created by the server to store the data uploaded from the stream.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>  
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.  If the local file already exists a System.IO.IOException is thrown.
            </summary>
            <remarks>
            To retrieve a remote file that you need to overwrite an existing file with or append to an existing file
            see the method GetFile(string, string, FileAction).
            </remarks>
            <param name="remotePath">A path of the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.
            </summary>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <param name="action">The type of action to take.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local stream object
            specfied in the outStream parameter.
            </summary> 
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="outStream">An output stream object used to stream the remote file to the local machine.</param>
            <param name="restart">A true/false value to indicate if the file download needs to be restarted due to a previous partial download.</param>
            <remarks>
            If the remote path is a file name then the file is downloaded from the FTP server current working directory.  Otherwise a fully qualified
            path for the remote file may be specified.  The output stream must be writeable and can be any stream object.  Finally, the restart parameter
            is used to send a restart command to the FTP server.  The FTP server is instructed to restart the download process at the last position of
            of the output stream.  Not all FTP servers support the restart command.  If the FTP server does not support the restart (REST) command,
            an FtpException error is thrown.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Exists(System.String)">
            <summary>
            Tests to see if a file or directory exists on the remote server.  The current working directory must be the
            parent or root directory of the file or directory whose existence is being tested.  For best results, 
            call this method from the root working directory ("/").
            </summary>
            <param name="path">The full path to the remote file or directory relative to the current working directory, or the filename 
            or directory in the current working directory.</param>
            <returns>Boolean value indicating if file exists or not.</returns>
            <remarks>This method will execute a change working directory (CWD) command prior to testing to see if the  
            file or direcotry exists.  The original working directory will be changed back to the original value
            after this method has completed.  This method may not work on systems where the directory listing is not being
            parsed correctly.  If the method call GetDirList() does not work properly with your FTP server, this method may not
            produce reliable results.  This method will also not produce reliable results if the directory or file is hidden on the
            remote FTP server.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetNameList">
            <summary>
            Retrieves a file name listing of the current working directory from the 
            remote FTP server using the NLST command.
            </summary>
            <returns>A string containing the file listing from the current working directory.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)">
            <summary>
            Retrieves a file name listing of the current working directory from the 
            remote FTP server using the NLST command.
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>A string containing the file listing from the current working directory.</returns>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the name list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText">
            <summary>
            Retrieves a directory listing of the current working directory from the 
            remote FTP server using the LIST command.
            </summary>
            <returns>A string containing the directory listing of files from the current working directory.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)">
            <summary>
            Retrieves a directory listing of the current working directory from the 
            remote FTP server using the LIST command.
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>A string containing the directory listing of files from the current working directory.</returns>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the name list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirList">
            <summary>
            Retrieves a list of the files from current working directory on the remote FTP 
            server using the LIST command.  
            </summary>
            <returns>FtpItemList collection object.</returns>
            <remarks>
            This method returns a FtpItemList collection of FtpItem objects.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>        
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)">
            <summary>
            Retrieves a list of the files from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>FtpFileCollection collection object.</returns>
            <remarks>
            This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.  Some FTP server implementations will not accept a full path to a resource.  On those
            systems it is best to change the working directory using the ChangeDirectoryMultiPath(string) method and then call
            the method GetDirList().
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>        
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)">
            <summary>
            Deeply retrieves a list of all files and all sub directories from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>FtpFileCollection collection object.</returns>
            <remarks>
            This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the directory list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames a file or directory on the remote FTP server.
            </summary>
            <param name="name">The name or absolute path of the file or directory you want to rename.</param>
            <param name="newName">The new name or absolute path of the file or directory.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Quote(System.String)">
            <summary>
            Send a raw FTP command to the server.
            </summary>
            <param name="command">A string containing a valid FTP command value such as SYST.</param>
            <returns>The raw textual response from the server.</returns>
            <remarks>
            This is an advanced feature of the FtpClient class that allows for any custom or specialized
            FTP command to be sent to the FTP server.  Some FTP server support custom commands outside of
            the standard FTP command list.  The following commands are not supported: PASV, RETR, STOR, and STRU.
            </remarks>
            <example>
            <code>
            FtpClient ftp = new FtpClient("ftp.microsoft.com");
            ftp.Open("anonymous", "myemail@server.com");
            string response = ftp.Quote("SYST");
            System.Diagnostics.Debug.WriteLine(response);
            ftp.Close();
            </code>
            </example>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.NoOperation">
            <summary>
            Sends a NOOP or no operation command to the FTP server.  This can be used to prevent some servers from logging out the
            interactive session during file transfer process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeMode(System.String,System.Int32)">
            <summary>
            Issues a site specific change file mode (CHMOD) command to the server.  Not all servers implement this command.
            </summary>
            <param name="path">The path to the file or directory you want to change the mode on.</param>
            <param name="octalValue">The CHMOD octal value.</param>
            <remarks>
            Common CHMOD values used on web servers.
            
                  Value 	User 	Group 	Other
                    755 	rwx 	r-x 	r-x
                    744 	rwx 	r--	    r--
                    766 	rwx 	rw- 	rw-
                    777 	rwx 	rwx 	rwx
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory containing the file or directory you wish to change the mode on by using with the 
            ChangeDirectory() or ChangeDirectoryMultiPath() method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Rename(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Site(System.String)">
            <summary>
            Issue a SITE command to the FTP server for site specific implementation commands.
            </summary>
            <param name="argument">One or more command arguments</param>
            <remarks>
            For example, the CHMOD command is issued as a SITE command.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            An FtpException is thrown if the file already exists.
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            To overwrite an existing file see the method PutFile(string, string, FileAction) and specify the 
            FileAction Create.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>            
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>            
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            An FtpException is thrown if the file already exists.
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.IO.Stream,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads stream data specified in the inputStream parameter to the remote FTP server.   
            </summary>
            <param name="inputStream">Any open stream object on the local client machine.</param>
            <param name="remotePath">Filename or path and filename of the file stored on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>        
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)">
            <summary>
            File Exchange Protocol (FXP) allows server-to-server transfer which can greatly speed up file transfers.
            </summary>
            <param name="fileName">The name of the file to transfer.</param>
            <param name="destination">The destination FTP server which must be supplied as an open and connected FtpClient object.</param>
            <remarks>
            Both servers must support and have FXP enabled before you can transfer files between two remote servers using FXP.  One FTP server must support PASV mode and the other server must allow PORT commands from a foreign address.  Finally, firewall settings may interfer with the ability of one server to access the other server.
            Starksoft FtpClient will coordinate the FTP negoitaion and necessary PORT and PASV transfer commands.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/> 
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync">
            <summary>
            Asynchronously retrieves a list of the files from current working directory on the remote FTP 
            server using the LIST command.  
            </summary>
            <remarks>
            This method returns a FtpItemList collection of FtpItem objects through the GetDirListAsyncCompleted event.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of the files from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <remarks>This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.  The FtpFileCollection is returned though the GetDirListAsyncCompleted event.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>        
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync">
            <summary>
            Asynchronous deep retrieval of a list of all files and all sub directories from the current path on the remote FTP 
            server using the LIST command. 
            </summary>
            <remarks>This method returns a FtpFileCollection object containing a collection of FtpItem objects through the GetDirListDeepAsyncCompleted event.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)">
            <summary>
            Asynchronous deep retrieval of a list of all files and all sub directories from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <remarks>This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects the GetDirListDeepAsyncCompleted event.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.
            </summary>
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <param name="action">The type of action to take.</param>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Asynchronously retrieves a remote file from the FTP server and writes the data to a local stream object
            specfied in the outStream parameter.
            </summary> 
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="outStream">An output stream object used to stream the remote file to the local machine.</param>
            <param name="restart">A true/false value to indicate if the file download needs to be restarted due to a previous partial download.</param>
            <remarks>
            If the remote path is a file name then the file is downloaded from the FTP server current working directory.  Otherwise a fully qualified
            path for the remote file may be specified.  The output stream must be writeable and can be any stream object.  Finally, the restart parameter
            is used to send a restart command to the FTP server.  The FTP server is instructed to restart the download process at the last position of
            of the output stream.  Not all FTP servers support the restart command.  If the FTP server does not support the restart (REST) command,
            an FtpException error is thrown.
            </remarks>        
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>  
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.IO.Stream,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads stream data specified in the inputStream parameter to the remote FTP server.   
            </summary>
            <param name="inputStream">Any open stream object on the local client machine.</param>
            <param name="remotePath">Filename or path and filename of the file stored on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)">
            <summary>
            Asynchronously opens a connection to the remote FTP server and log in with user name and password credentials.
            </summary>
            <param name="user">User name.  Many public ftp allow for this value to 'anonymous'.</param>
            <param name="password">Password.  Anonymous public ftp servers generally require a valid email address for a password.</param>
            <remarks>Use the Close() method to log off and close the connection to the FTP server.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.OpenAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Close"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)">
            <summary>
            Asynchronous File Exchange Protocol (FXP) allows server-to-server transfer which can greatly speed up file transfers.
            </summary>
            <param name="fileName">The name of the file to transfer.</param>
            <param name="destination">The destination FTP server which must be supplied as an open and connected FtpClient object.</param>
            <remarks>
            Both servers must support and have FXP enabled before you can transfer files between two remote servers using FXP.  One FTP server must support PASV mode and the other server must allow PORT commands from a foreign address.  Finally, firewall settings may interfer with the ability of one server to access the other server.
            Starksoft FtpClient will coordinate the FTP negoitaion and necessary PORT and PASV transfer commands.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.FxpCopyAsyncCompleted"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Dispose">
            <summary>
            Disposes all FtpClient objects and connections.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Dispose(System.Boolean)">
            <summary>
            Dispose Method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Finalize">
            <summary>
            Dispose deconstructor.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.FileTransferType">
            <summary>
            Gets or sets the file transfer item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.ItemParser">
            <summary>
            Gets or sets the the directory item parser to use when parsing directory listing data from the FTP server.
            This parser is used by the GetDirList() and GetDirList(string) methods.  
            </summary>
            <remarks>
            You can create your own custom directory listing parser by creating an object that implements the 
            IFtpItemParser interface.  This is particular useful when parsing exotic file directory listing
            formats from specific FTP servers.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.IsLoggingOn">
            <summary>
            Gets or sets logging of file transfers.
            </summary>
            <remarks>
            All data transfer activity can be retrieved from the Log property.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.Log">
            <summary>
            Gets or sets the Stream object used for logging data transfer activity.
            </summary>
            <remarks>
            By default a MemoryStream object is created to log all data transfer activity.  Any 
            Stream object that can be written to may be used in place of the MemoryStream object.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.IsLoggingOn"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout">
            <summary>
            Gets or sets the timeout value in miliseconds when waiting for an FXP server to server transfer to complete.
            </summary>
            <remarks>By default this timeout value is set to 600000 (10 minutes).  For large FXP file transfers you may need to adjust this number higher.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.CurrentDirectory">
            <summary>
            Gets the current directory path without sending having to send a request to the server.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetDirListAsyncCompleted">
            <summary>
            Event handler for GetDirListAsync method.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted">
            <summary>
            Event handler for GetDirListDeepAsync method.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted">
            <summary>
            Event that fires when the GetFileAsync method is invoked.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted">
            <summary>
            Asynchronous event for PutFileAsync method.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.OpenAsyncCompleted">
            <summary>
            Event handler for OpenAsync method.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.FxpCopyAsyncCompleted">
            <summary>
            Asynchronous event for FxpCopyAsync method.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpLoginException">
            <summary>
            This exception is thrown when an error occurs during the FTP login process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FxpCopyAsyncCompletedEventArgs">
            <summary>
            Provides data for the OpenAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FxpCopyAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the FxpCopyAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException">
            <summary>
            This exception is thrown when the server fails to respond to an FTP command in a timely manner.
            The waiting time can be adjusted by specifing a different value for the CommandTimeout property.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseException">
            <summary>
            This exception is thrown when a file integrity check fails.
            For detailed information about the error, the FTP server response 
            can be inspected via the Reponse property on this exception.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="response">Ftp response object.</param>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionOpenException">
            <summary>
            This exception is thrown when an error occurs while attempt to open a command connection
            to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetDirAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
             Initializes a new instance of the GetDirAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="directoryListing">A FtpItemCollection containing the directory listing.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs.DirectoryListingResult">
            <summary>
            Directory listing collection.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCertificateValidationException">
            <summary>
            This exception is thrown when an X.509 certificate fails validation when establishing a secure command or data connection
            to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpGenericParser">
            <summary>
            Generic ftp file and directory listing parser that supports most Unix, Dos, and Windows style FTP 
            directory listings.  A custom parser can be created using the IFtpItemParser interface in the event
            this parser does not suit the needs of a specific FTP server directory format listing.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpGenericParser.ParseLine(System.String)">
            <summary>
            Method to parse a line of file listing data from the FTP server.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>Object representing data in parsed file listing line.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient transfer progress and complete events.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ValidateServerCertificateEventArgs constructor.
            </summary>
            <param name="certificate">X.509 certificate object.</param>
            <param name="chain">X.509 certificate chain.</param>
            <param name="policyErrors">SSL policy errors.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.Certificate">
            <summary>
            The X.509 version 3 server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.Chain">
            <summary>
            Server chain building engine for server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.PolicyErrors">
            <summary>
            Enumeration representing SSL (Secure Socket Layer) errors.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.IsCertificateValid">
            <summary>
            Boolean value indicating if the server certificate is valid and can
            be accepted by the FtpClient object.
            </summary>
            <remarks>
            Default value is false which results in certificate being rejected and the SSL
            connection abandoned.  Set this value to true to accept the server certificate 
            otherwise the SSL connection will be closed.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferProgressEventArgs">
            <summary>
            Event arguments to facilitate the transfer progress event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.TransferProgressEventArgs.#ctor(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The number of bytes transferred.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes transferred.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.PutFileAsyncCompletedEventArgs">
            <summary>
            Provides data for the PutFileAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.PutFileAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the PutFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionBrokenException">
            <summary>
            This exception is thrown when a ftp connection is broken and fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItemType">
            <summary>
            The itemType of item as reported by the FTP server.
            </summary>
            <remarks>
            Data transmitted from the FTP server after a directory list operation is usually a item itemType of Directory or File.  Unix 
            systems also support additional directory item types such as symbolic links and named sockets.  Not all FTP servers will report
            enough information to determine the file itemType.  In such cases a file itemType of Unknown is specified.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.Directory">
            <summary>
            Directory item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.File">
            <summary>
            File item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.SymbolicLink">
            <summary>
            Symbolic link item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.BlockSpecialFile">
            <summary>
            Block special file item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.CharacterSpecialFile">
            <summary>
            Character special file item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.NamedSocket">
            <summary>
            Name socket item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.DomainSocket">
            <summary>
            Domain socket item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.Unknown">
            <summary>
            Unknown item.  The system was unable to determine the itemType of item.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItem">
            <summary>
            The FtpItem class represents the file and directory listing items as reported by the FTP server.
            </summary>
            <remarks>
            Usually items are of types Files and Directories although
            the Unix based FTP servers may report additional information such as permissions and symbolic link information.  The FtpItem class supports
            the most commom versions of Unix, Windows, DOS, and Machintosh Ftp Servers.  There is no FTP standard concerning how an FTP server should
            list file item data.  Therefore, the FtpClient object supports a pluggable ftp item parser that you can write to support more exotic
            ftp item listing formats.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.#ctor(System.String,System.DateTime,System.Int64,System.String,System.String,Starksoft.Net.Ftp.FtpItemType,System.String)">
            <summary>
            Constructor to create a new ftp item.
            </summary>
            <param name="name">Name of the item.</param>
            <param name="modified">Modified date and/or time of the item.</param>
            <param name="size">Number of bytes or size of the item.</param>
            <param name="symbolicLink">Symbolic link name.</param>
            <param name="attributes">Permission text for item.</param>
            <param name="itemType">Type of the item.</param>
            <param name="rawText">The raw text of the item.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Name">
            <summary>
            Item name.  All FTP servers should report a name value for the FTP item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Attributes">
            <summary>
            Permissions text for the item.  Many FTP servers will report file permission information.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Modified">
            <summary>
            Modified date and possibly time for the ftp item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Size">
            <summary>
            The size of the ftp item as reported by the FTP server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.SymbolicLink">
            <summary>
            The symbolic link name if the item is of itemType symbolic link.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.ItemType">
            <summary>
            The itemType of the ftp item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.RawText">
            <summary>
            The raw textual line information as reported by the FTP server.  This can be useful for examining exotic FTP formats and for debugging
            a custom ftp item parser.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.ParentPath">
            <summary>
            Path to the parent directory.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.FullPath">
            <summary>
            Item full path.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseCollection">
            <summary>
            Ftp response collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.IndexOf(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpResponseCollection list.
            </summary>
            <param name="item">The FtpResponse object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.Add(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Adds an FtpResponse to the end of the FtpResponseCollection list.
            </summary>
            <param name="item">FtpResponse object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.Clear">
            <summary>
            Remove all elements from the FtpResponseCollection list.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.GetRawText">
            <summary>
            Get the raw FTP server supplied reponse text.
            </summary>
            <returns>A string containing the FTP server response.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.GetLast">
            <summary>
            Get the last server response from the FtpResponseCollection list.
            </summary>
            <returns>FtpResponse object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpResponseCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseCollection.Item(System.Int32)">
            <summary>
            Gets an FtpResponse from the FtpResponseCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpResponse object.</returns>
        </member>
        <member name="F:Starksoft.Hashing.Crc32.DefaultPolynomial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starksoft.Hashing.Crc32.DefaultSeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.Compute(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.Compute(System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Hashing.Crc32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:Starksoft.Hashing.Crc32.HashSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataTransferException">
            <summary>
            This exception is thrown when a data transfer fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
    </members>
</doc>
